{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the LightRL Documentation","text":"<p>Welcome to the official documentation for LightRL, a lightweight and efficient Reinforcement Learning library aimed at providing simple yet powerful tools for developing and experimenting with RL algorithms.</p>"},{"location":"#overview","title":"Overview","text":"<p>LightRL is designed to be user-friendly and flexible, providing researchers and developers with the essential tools to build and test their RL models. Whether you're a beginner or an experienced practitioner, LightRL aims to smooth the learning curve and increase productivity.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To start using LightRL, check out the following resources:</p> <ul> <li>Installation Guide: Instructions on how to install LightRL and its dependencies.</li> <li>Quick Start: A brief introduction to using LightRL for your first project.</li> <li>API Documentation: Detailed information on the API and available functions.</li> <li>Examples: In-depth tutorials and examples showcasing the features and capabilities of LightRL.</li> </ul> <p>LightRL is licensed under the MIT License, ensuring that it remains free and open-source.</p>"},{"location":"#contact","title":"Contact","text":"<p>For questions, suggestions, or feedback, you can reach out to us at daniel.herman@protonmail.com or open an issue on our GitHub repository.</p> <p>Thank you for choosing LightRL! We hope it helps you in your journey through reinforcement learning.</p>"},{"location":"api/","title":"LightRL API Reference","text":"<p>Welcome to the detailed API reference for LightRL. Below you'll find documentation for the key classes and functions available in the library, complete with usage guidelines and examples.</p>"},{"location":"api/#bandits-module","title":"Bandits Module","text":"<p>LightRL includes a variety of bandit algorithms, each tailored for specific use cases in reinforcement learning environments. The following classes are part of the <code>lightrl.bandits</code> module:</p>"},{"location":"api/#base-bandit-class","title":"Base Bandit Class","text":"<ul> <li><code>Bandit</code>: The foundational class for all bandit algorithms. Subclasses provide specialized implementations.   ::: lightrl.bandits.Bandit</li> </ul>"},{"location":"api/#epsilon-based-bandits","title":"Epsilon-Based Bandits","text":"<p>These bandits use epsilon strategies to balance exploration and exploitation.</p> <ul> <li> <p><code>EpsilonGreedyBandit</code>: Implements an epsilon-greedy algorithm, allowing for a tunable exploration rate.   ::: lightrl.bandits.EpsilonGreedyBandit</p> </li> <li> <p><code>EpsilonFirstBandit</code>: Prioritizes exploration for a set number of initial steps before switching to exploitation.   ::: lightrl.bandits.EpsilonFirstBandit</p> </li> <li> <p><code>EpsilonDecreasingBandit</code>: Uses a decreasing epsilon value over time to reduce exploration as understanding improves.   ::: lightrl.bandits.EpsilonDecreasingBandit</p> </li> </ul>"},{"location":"api/#other-bandit-strategies","title":"Other Bandit Strategies","text":"<ul> <li> <p><code>UCB1Bandit</code>: Employs the UCB1 algorithm, focusing on arm pulls with calculated confidence bounds.   ::: lightrl.bandits.UCB1Bandit</p> </li> <li> <p><code>GreedyBanditWithHistory</code>: A variant that uses historical performance data to adjust its greedy selection strategy.   ::: lightrl.bandits.GreedyBanditWithHistory</p> </li> </ul>"},{"location":"api/#runners-module","title":"Runners Module","text":"<ul> <li><code>two_state_time_dependent_process</code>: This function models a process with time-dependent state transitions, useful in simulating dynamic environments.   ::: lightrl.runners.two_state_time_dependent_process</li> </ul> <p>If you have any questions or require further assistance, feel free to open an issue.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#optimize-number-of-calls-per-second-to-api","title":"Optimize number of calls per second to API","text":"<p>Typical example is when you want to call API, but you are being blocked. With this package you can automatically find the optimal number of requests that should be sent together in order to achieve error rate below certain treshold.</p> <pre><code>import time\nimport random\nfrom typing import Tuple\n\nfrom lightrl import EpsilonDecreasingBandit, two_state_time_dependent_process\n\n\nclass SimulatedAPI:\n    def __init__(self):\n        # Initialize variables to keep track of requests\n        self.time_window_requests = []\n        self.window_length = 1  # 60 seconds window\n        self.request_limit = 200  # request limit in a window\n        self.block_duration = 1  # block duration in seconds\n        self.blocked_until = 0\n\n    def request(self) -&gt; Tuple[int, int]:\n        current_time = time.time()\n\n        # Remove requests older than the current window\n        while (\n            self.time_window_requests\n            and self.time_window_requests[0] &lt; current_time - self.window_length\n        ):\n            self.time_window_requests.pop(0)\n\n        # Analyze if blocked\n        if current_time &lt; self.blocked_until:\n            return 500\n\n        if len(self.time_window_requests) &gt; self.request_limit:  # Over the limit\n            self.blocked_until = current_time + self.block_duration\n            return 500\n\n        self.time_window_requests.append(current_time)\n        return 200\n\n\nif __name__ == \"__main__\":\n    api = SimulatedAPI()\n    request_nums = [10, 25, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500]\n    bandit = EpsilonDecreasingBandit(\n        arms=request_nums, initial_epsilon=1.0, limit_epsilon=0.1, half_decay_steps=100\n    )\n\n    def api_request_fun(request_num):\n        success_cnt = 0\n        fail_cnt = 0\n        for _ in range(request_num):\n            http_status = api.request()\n            if http_status == 200:\n                success_cnt += 1\n            else:\n                fail_cnt += 1\n            time.sleep(0.0001)\n        return success_cnt, fail_cnt\n\n    two_state_time_dependent_process(\n        bandit=bandit,\n        fun=api_request_fun,\n        failure_threshold=0.1,\n        default_wait_time=0.1,\n        extra_wait_time=0.1,\n        waiting_args=[10],  # Working with 10 requests in the waiting state\n        max_steps=1000,\n        verbose=True,\n        reward_factor=1e-6,\n    )\n</code></pre> <p>This script will run for 3 mins and then it will output at the end</p> <pre><code>Q-values per arm:\n  num_tasks=10: avg_reward=0.00010, count=6\n  num_tasks=25: avg_reward=0.00019, count=12\n  num_tasks=50: avg_reward=0.00030, count=15\n  num_tasks=100: avg_reward=0.00087, count=7\n  num_tasks=150: avg_reward=0.00083, count=11\n  num_tasks=200: avg_reward=0.00113, count=109\n  num_tasks=250: avg_reward=0.00010, count=11\n  num_tasks=300: avg_reward=0.00010, count=13\n  num_tasks=350: avg_reward=0.00009, count=16\n  num_tasks=400: avg_reward=0.00010, count=11\n  num_tasks=450: avg_reward=0.00013, count=9\n  num_tasks=500: avg_reward=0.00010, count=17\n</code></pre> <p>Multi-armed bandit correctly found out that the optimal number of tasks is num_tasks=200.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#using-pypi","title":"Using PyPI","text":"<p>Using bare pip manager just simply install <code>lightrl</code> package.</p> <pre><code>pip install lightrl\n</code></pre>"},{"location":"licence/","title":"Licence","text":"<p>MIT License</p> <p>Copyright (c) 2025 Daniel Herman</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}